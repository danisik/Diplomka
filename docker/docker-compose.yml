version: '3.7'

services:  
  elasticsearch:
    image: elasticsearch:8.2.0
    container_name: elasticsearch
    restart: always
    env_file:
      - .env
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      discovery.type: ${ES_DISCOVERY_TYPE}
      xpack.security.enabled: ${ES_SECURITY_ENABLED}
      http.cors.enabled: ${ES_CORS_ENABLED}
      http.cors.allow-origin: ${ES_CORS_ORIGIN}
      http.cors.allow-headers: ${ES_CORS_HEADERS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
      
  elasticvue:
    image: cars10/elasticvue:0.39.0
    restart: always
    container_name: elasticvue
    ports:
      - 8080:8080

  mongo-setup:
    container_name: mongo-setup
    image: mongo:5.0.6
    restart: on-failure
    networks:
      default:
    volumes:
      - ./init/mongo_init.sh:/mongo_init.sh
      - ./init/create_mongo_database.js:/create_mongo_database.js
    entrypoint: [ "/mongo_init.sh" ]
    depends_on:
      - mongo
      
  mongo:
    image: mongo:5.0.6
    restart: always
    container_name: mongo
    ports:
      - 27017:27017
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "${MONGO_REPLICA_SET_NAME}" ]
    
  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    restart: always
    env_file:
      - .env
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_URL}  
      
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.0
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.1.0
    hostname: broker
    container_name: broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_PUBLIC:PLAINTEXT,LISTENER_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: LISTENER_PUBLIC://broker:29092,LISTENER_INTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_PUBLIC://broker:29092,LISTENER_INTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_PUBLIC
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: "kafka.controller=WARN,kafka.foo.bar=DEBUG"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN

  connect:
    image: 'confluentinc/cp-kafka-connect:6.1.0'
    hostname: connect
    container_name: connect
    restart: always
    ports:
      - "28082:28082"
    depends_on:
      - zookeeper
      - broker
    command:
            - bash 
            - -c 
            - |
                echo "Installing connector plugins"
                confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.4.0
                confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest
                # Launch the Kafka Connect worker
                /etc/confluent/docker/run &
                # Don't exit
                sleep infinity
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_PORT: 28082 
      CONNECT_GROUP_ID: "searcheg" 
      CONNECT_CONFIG_STORAGE_TOPIC: searcheg-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: searcheg-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: searcheg-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components    

  mysql:
    image: mysql:8.0.16
    container_name: mysql
    restart: always
    env_file:
      - .env    
    ports:
      - 6033:3306
    command: --init-file /mysql_init.sql
    volumes:
        - ./init/mysql_init.sql:/mysql_init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    

  phpmyadmin:
    image: phpmyadmin:5.1.3
    container_name: phpmyadmin
    restart: always
    env_file:
      - .env
    ports:
      - 8082:80
    links:
      - mysql
    environment:
      PMA_HOST: ${PMA_HOST}
      PMA_PORT: ${PMA_PORT}
      PMA_ARBITRARY: ${PMA_ARBITRARY}      
      UPLOAD_LIMIT: ${UPLOAD_LIMIT}

  mongo_connector:
    image: yeasy/mongo-connector:latest
    restart: always
    container_name: mongo-connector
    env_file:
      - .env
    links:
      - elasticsearch:elasticsearch
    environment:
      MONGO: ${MONGO_CON_HOST}
      MONGO_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    restart: always
    env_file:
      - .env
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_URL}
        mongo_connector:
    image: yeasy/mongo-connector:latest
    restart: always
    container_name: mongo-connector
    env_file:
      - .env
    links:
      - elasticsearch:elasticsearch
    environment:
      MONGO: ${MONGO_CON_HOST}
      MONGO_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

  mysql:
    image: mysql:8.0.16
    container_name: mysql
    restart: always
    env_file:
      - .env    
    ports:
      - 6033:3306
    command: --init-file /mysql_init.sql
    volumes:
        - ./init/mysql_init.sql:/mysql_init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    

  phpmyadmin:
    image: phpmyadmin:5.1.3
    container_name: phpmyadmin
    restart: always
    env_file:
      - .env
    ports:
      - 8082:80
    links:
      - mysql
    environment:
      PMA_HOST: ${PMA_HOST}
      PMA_PORT: ${PMA_PORT}
      PMA_ARBITRARY: ${PMA_ARBITRARY}      
      UPLOAD_LIMIT: ${UPLOAD_LIMIT}